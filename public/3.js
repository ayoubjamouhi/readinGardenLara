(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[3],{

/***/ "./node_modules/@coreui/coreui/dist/js/coreui-utilities.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@coreui/coreui/dist/js/coreui-utilities.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\r\n  * CoreUI v2.1.6 (https://coreui.io)\r\n  * Copyright 2019 Łukasz Holeczek\r\n  * Licensed under MIT (https://coreui.io)\r\n  */\r\n(function (global, factory) {\r\n   true ? factory(exports) :\r\n  undefined;\r\n}(this, function (exports) { 'use strict';\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.6): classes.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\r\n  var sidebarCssClasses = ['sidebar-show', 'sidebar-sm-show', 'sidebar-md-show', 'sidebar-lg-show', 'sidebar-xl-show'];\r\n  var asideMenuCssClasses = ['aside-menu-show', 'aside-menu-sm-show', 'aside-menu-md-show', 'aside-menu-lg-show', 'aside-menu-xl-show'];\r\n  var validBreakpoints = ['sm', 'md', 'lg', 'xl'];\r\n  function checkBreakpoint(breakpoint, list) {\r\n    return list.indexOf(breakpoint) > -1;\r\n  }\r\n\r\n  function createCommonjsModule(fn, module) {\r\n  \treturn module = { exports: {} }, fn(module, module.exports), module.exports;\r\n  }\r\n\r\n  var _core = createCommonjsModule(function (module) {\r\n  var core = module.exports = { version: '2.6.1' };\r\n  if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\r\n  });\r\n  var _core_1 = _core.version;\r\n\r\n  var _global = createCommonjsModule(function (module) {\r\n  // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\r\n  var global = module.exports = typeof window != 'undefined' && window.Math == Math\r\n    ? window : typeof self != 'undefined' && self.Math == Math ? self\r\n    // eslint-disable-next-line no-new-func\r\n    : Function('return this')();\r\n  if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\r\n  });\r\n\r\n  var _library = false;\r\n\r\n  var _shared = createCommonjsModule(function (module) {\r\n  var SHARED = '__core-js_shared__';\r\n  var store = _global[SHARED] || (_global[SHARED] = {});\r\n\r\n  (module.exports = function (key, value) {\r\n    return store[key] || (store[key] = value !== undefined ? value : {});\r\n  })('versions', []).push({\r\n    version: _core.version,\r\n    mode: _library ? 'pure' : 'global',\r\n    copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\r\n  });\r\n  });\r\n\r\n  var id = 0;\r\n  var px = Math.random();\r\n  var _uid = function (key) {\r\n    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\r\n  };\r\n\r\n  var _wks = createCommonjsModule(function (module) {\r\n  var store = _shared('wks');\r\n\r\n  var Symbol = _global.Symbol;\r\n  var USE_SYMBOL = typeof Symbol == 'function';\r\n\r\n  var $exports = module.exports = function (name) {\r\n    return store[name] || (store[name] =\r\n      USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));\r\n  };\r\n\r\n  $exports.store = store;\r\n  });\r\n\r\n  var _isObject = function (it) {\r\n    return typeof it === 'object' ? it !== null : typeof it === 'function';\r\n  };\r\n\r\n  var _anObject = function (it) {\r\n    if (!_isObject(it)) throw TypeError(it + ' is not an object!');\r\n    return it;\r\n  };\r\n\r\n  var _fails = function (exec) {\r\n    try {\r\n      return !!exec();\r\n    } catch (e) {\r\n      return true;\r\n    }\r\n  };\r\n\r\n  // Thank's IE8 for his funny defineProperty\r\n  var _descriptors = !_fails(function () {\r\n    return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\r\n  });\r\n\r\n  var document$1 = _global.document;\r\n  // typeof document.createElement is 'object' in old IE\r\n  var is = _isObject(document$1) && _isObject(document$1.createElement);\r\n  var _domCreate = function (it) {\r\n    return is ? document$1.createElement(it) : {};\r\n  };\r\n\r\n  var _ie8DomDefine = !_descriptors && !_fails(function () {\r\n    return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;\r\n  });\r\n\r\n  // 7.1.1 ToPrimitive(input [, PreferredType])\r\n\r\n  // instead of the ES6 spec version, we didn't implement @@toPrimitive case\r\n  // and the second argument - flag - preferred type is a string\r\n  var _toPrimitive = function (it, S) {\r\n    if (!_isObject(it)) return it;\r\n    var fn, val;\r\n    if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\r\n    if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;\r\n    if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;\r\n    throw TypeError(\"Can't convert object to primitive value\");\r\n  };\r\n\r\n  var dP = Object.defineProperty;\r\n\r\n  var f = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {\r\n    _anObject(O);\r\n    P = _toPrimitive(P, true);\r\n    _anObject(Attributes);\r\n    if (_ie8DomDefine) try {\r\n      return dP(O, P, Attributes);\r\n    } catch (e) { /* empty */ }\r\n    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\r\n    if ('value' in Attributes) O[P] = Attributes.value;\r\n    return O;\r\n  };\r\n\r\n  var _objectDp = {\r\n  \tf: f\r\n  };\r\n\r\n  var _propertyDesc = function (bitmap, value) {\r\n    return {\r\n      enumerable: !(bitmap & 1),\r\n      configurable: !(bitmap & 2),\r\n      writable: !(bitmap & 4),\r\n      value: value\r\n    };\r\n  };\r\n\r\n  var _hide = _descriptors ? function (object, key, value) {\r\n    return _objectDp.f(object, key, _propertyDesc(1, value));\r\n  } : function (object, key, value) {\r\n    object[key] = value;\r\n    return object;\r\n  };\r\n\r\n  // 22.1.3.31 Array.prototype[@@unscopables]\r\n  var UNSCOPABLES = _wks('unscopables');\r\n  var ArrayProto = Array.prototype;\r\n  if (ArrayProto[UNSCOPABLES] == undefined) _hide(ArrayProto, UNSCOPABLES, {});\r\n  var _addToUnscopables = function (key) {\r\n    ArrayProto[UNSCOPABLES][key] = true;\r\n  };\r\n\r\n  var _iterStep = function (done, value) {\r\n    return { value: value, done: !!done };\r\n  };\r\n\r\n  var _iterators = {};\r\n\r\n  var toString = {}.toString;\r\n\r\n  var _cof = function (it) {\r\n    return toString.call(it).slice(8, -1);\r\n  };\r\n\r\n  // fallback for non-array-like ES3 and non-enumerable old V8 strings\r\n\r\n  // eslint-disable-next-line no-prototype-builtins\r\n  var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\r\n    return _cof(it) == 'String' ? it.split('') : Object(it);\r\n  };\r\n\r\n  // 7.2.1 RequireObjectCoercible(argument)\r\n  var _defined = function (it) {\r\n    if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\r\n    return it;\r\n  };\r\n\r\n  // to indexed object, toObject with fallback for non-array-like ES3 strings\r\n\r\n\r\n  var _toIobject = function (it) {\r\n    return _iobject(_defined(it));\r\n  };\r\n\r\n  var hasOwnProperty = {}.hasOwnProperty;\r\n  var _has = function (it, key) {\r\n    return hasOwnProperty.call(it, key);\r\n  };\r\n\r\n  var _redefine = createCommonjsModule(function (module) {\r\n  var SRC = _uid('src');\r\n  var TO_STRING = 'toString';\r\n  var $toString = Function[TO_STRING];\r\n  var TPL = ('' + $toString).split(TO_STRING);\r\n\r\n  _core.inspectSource = function (it) {\r\n    return $toString.call(it);\r\n  };\r\n\r\n  (module.exports = function (O, key, val, safe) {\r\n    var isFunction = typeof val == 'function';\r\n    if (isFunction) _has(val, 'name') || _hide(val, 'name', key);\r\n    if (O[key] === val) return;\r\n    if (isFunction) _has(val, SRC) || _hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\r\n    if (O === _global) {\r\n      O[key] = val;\r\n    } else if (!safe) {\r\n      delete O[key];\r\n      _hide(O, key, val);\r\n    } else if (O[key]) {\r\n      O[key] = val;\r\n    } else {\r\n      _hide(O, key, val);\r\n    }\r\n  // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\r\n  })(Function.prototype, TO_STRING, function toString() {\r\n    return typeof this == 'function' && this[SRC] || $toString.call(this);\r\n  });\r\n  });\r\n\r\n  var _aFunction = function (it) {\r\n    if (typeof it != 'function') throw TypeError(it + ' is not a function!');\r\n    return it;\r\n  };\r\n\r\n  // optional / simple context binding\r\n\r\n  var _ctx = function (fn, that, length) {\r\n    _aFunction(fn);\r\n    if (that === undefined) return fn;\r\n    switch (length) {\r\n      case 1: return function (a) {\r\n        return fn.call(that, a);\r\n      };\r\n      case 2: return function (a, b) {\r\n        return fn.call(that, a, b);\r\n      };\r\n      case 3: return function (a, b, c) {\r\n        return fn.call(that, a, b, c);\r\n      };\r\n    }\r\n    return function (/* ...args */) {\r\n      return fn.apply(that, arguments);\r\n    };\r\n  };\r\n\r\n  var PROTOTYPE = 'prototype';\r\n\r\n  var $export = function (type, name, source) {\r\n    var IS_FORCED = type & $export.F;\r\n    var IS_GLOBAL = type & $export.G;\r\n    var IS_STATIC = type & $export.S;\r\n    var IS_PROTO = type & $export.P;\r\n    var IS_BIND = type & $export.B;\r\n    var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] || (_global[name] = {}) : (_global[name] || {})[PROTOTYPE];\r\n    var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});\r\n    var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\r\n    var key, own, out, exp;\r\n    if (IS_GLOBAL) source = name;\r\n    for (key in source) {\r\n      // contains in native\r\n      own = !IS_FORCED && target && target[key] !== undefined;\r\n      // export native or passed\r\n      out = (own ? target : source)[key];\r\n      // bind timers to global for call from export context\r\n      exp = IS_BIND && own ? _ctx(out, _global) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;\r\n      // extend global\r\n      if (target) _redefine(target, key, out, type & $export.U);\r\n      // export\r\n      if (exports[key] != out) _hide(exports, key, exp);\r\n      if (IS_PROTO && expProto[key] != out) expProto[key] = out;\r\n    }\r\n  };\r\n  _global.core = _core;\r\n  // type bitmap\r\n  $export.F = 1;   // forced\r\n  $export.G = 2;   // global\r\n  $export.S = 4;   // static\r\n  $export.P = 8;   // proto\r\n  $export.B = 16;  // bind\r\n  $export.W = 32;  // wrap\r\n  $export.U = 64;  // safe\r\n  $export.R = 128; // real proto method for `library`\r\n  var _export = $export;\r\n\r\n  // 7.1.4 ToInteger\r\n  var ceil = Math.ceil;\r\n  var floor = Math.floor;\r\n  var _toInteger = function (it) {\r\n    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\r\n  };\r\n\r\n  // 7.1.15 ToLength\r\n\r\n  var min = Math.min;\r\n  var _toLength = function (it) {\r\n    return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\r\n  };\r\n\r\n  var max = Math.max;\r\n  var min$1 = Math.min;\r\n  var _toAbsoluteIndex = function (index, length) {\r\n    index = _toInteger(index);\r\n    return index < 0 ? max(index + length, 0) : min$1(index, length);\r\n  };\r\n\r\n  // false -> Array#indexOf\r\n  // true  -> Array#includes\r\n\r\n\r\n\r\n  var _arrayIncludes = function (IS_INCLUDES) {\r\n    return function ($this, el, fromIndex) {\r\n      var O = _toIobject($this);\r\n      var length = _toLength(O.length);\r\n      var index = _toAbsoluteIndex(fromIndex, length);\r\n      var value;\r\n      // Array#includes uses SameValueZero equality algorithm\r\n      // eslint-disable-next-line no-self-compare\r\n      if (IS_INCLUDES && el != el) while (length > index) {\r\n        value = O[index++];\r\n        // eslint-disable-next-line no-self-compare\r\n        if (value != value) return true;\r\n      // Array#indexOf ignores holes, Array#includes - not\r\n      } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\r\n        if (O[index] === el) return IS_INCLUDES || index || 0;\r\n      } return !IS_INCLUDES && -1;\r\n    };\r\n  };\r\n\r\n  var shared = _shared('keys');\r\n\r\n  var _sharedKey = function (key) {\r\n    return shared[key] || (shared[key] = _uid(key));\r\n  };\r\n\r\n  var arrayIndexOf = _arrayIncludes(false);\r\n  var IE_PROTO = _sharedKey('IE_PROTO');\r\n\r\n  var _objectKeysInternal = function (object, names) {\r\n    var O = _toIobject(object);\r\n    var i = 0;\r\n    var result = [];\r\n    var key;\r\n    for (key in O) if (key != IE_PROTO) _has(O, key) && result.push(key);\r\n    // Don't enum bug & hidden keys\r\n    while (names.length > i) if (_has(O, key = names[i++])) {\r\n      ~arrayIndexOf(result, key) || result.push(key);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // IE 8- don't enum bug keys\r\n  var _enumBugKeys = (\r\n    'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\r\n  ).split(',');\r\n\r\n  // 19.1.2.14 / 15.2.3.14 Object.keys(O)\r\n\r\n\r\n\r\n  var _objectKeys = Object.keys || function keys(O) {\r\n    return _objectKeysInternal(O, _enumBugKeys);\r\n  };\r\n\r\n  var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {\r\n    _anObject(O);\r\n    var keys = _objectKeys(Properties);\r\n    var length = keys.length;\r\n    var i = 0;\r\n    var P;\r\n    while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);\r\n    return O;\r\n  };\r\n\r\n  var document$2 = _global.document;\r\n  var _html = document$2 && document$2.documentElement;\r\n\r\n  // 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\r\n\r\n\r\n\r\n  var IE_PROTO$1 = _sharedKey('IE_PROTO');\r\n  var Empty = function () { /* empty */ };\r\n  var PROTOTYPE$1 = 'prototype';\r\n\r\n  // Create object with fake `null` prototype: use iframe Object with cleared prototype\r\n  var createDict = function () {\r\n    // Thrash, waste and sodomy: IE GC bug\r\n    var iframe = _domCreate('iframe');\r\n    var i = _enumBugKeys.length;\r\n    var lt = '<';\r\n    var gt = '>';\r\n    var iframeDocument;\r\n    iframe.style.display = 'none';\r\n    _html.appendChild(iframe);\r\n    iframe.src = 'javascript:'; // eslint-disable-line no-script-url\r\n    // createDict = iframe.contentWindow.Object;\r\n    // html.removeChild(iframe);\r\n    iframeDocument = iframe.contentWindow.document;\r\n    iframeDocument.open();\r\n    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\r\n    iframeDocument.close();\r\n    createDict = iframeDocument.F;\r\n    while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];\r\n    return createDict();\r\n  };\r\n\r\n  var _objectCreate = Object.create || function create(O, Properties) {\r\n    var result;\r\n    if (O !== null) {\r\n      Empty[PROTOTYPE$1] = _anObject(O);\r\n      result = new Empty();\r\n      Empty[PROTOTYPE$1] = null;\r\n      // add \"__proto__\" for Object.getPrototypeOf polyfill\r\n      result[IE_PROTO$1] = O;\r\n    } else result = createDict();\r\n    return Properties === undefined ? result : _objectDps(result, Properties);\r\n  };\r\n\r\n  var def = _objectDp.f;\r\n\r\n  var TAG = _wks('toStringTag');\r\n\r\n  var _setToStringTag = function (it, tag, stat) {\r\n    if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\r\n  };\r\n\r\n  var IteratorPrototype = {};\r\n\r\n  // 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\r\n  _hide(IteratorPrototype, _wks('iterator'), function () { return this; });\r\n\r\n  var _iterCreate = function (Constructor, NAME, next) {\r\n    Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });\r\n    _setToStringTag(Constructor, NAME + ' Iterator');\r\n  };\r\n\r\n  // 7.1.13 ToObject(argument)\r\n\r\n  var _toObject = function (it) {\r\n    return Object(_defined(it));\r\n  };\r\n\r\n  // 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\r\n\r\n\r\n  var IE_PROTO$2 = _sharedKey('IE_PROTO');\r\n  var ObjectProto = Object.prototype;\r\n\r\n  var _objectGpo = Object.getPrototypeOf || function (O) {\r\n    O = _toObject(O);\r\n    if (_has(O, IE_PROTO$2)) return O[IE_PROTO$2];\r\n    if (typeof O.constructor == 'function' && O instanceof O.constructor) {\r\n      return O.constructor.prototype;\r\n    } return O instanceof Object ? ObjectProto : null;\r\n  };\r\n\r\n  var ITERATOR = _wks('iterator');\r\n  var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\r\n  var FF_ITERATOR = '@@iterator';\r\n  var KEYS = 'keys';\r\n  var VALUES = 'values';\r\n\r\n  var returnThis = function () { return this; };\r\n\r\n  var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\r\n    _iterCreate(Constructor, NAME, next);\r\n    var getMethod = function (kind) {\r\n      if (!BUGGY && kind in proto) return proto[kind];\r\n      switch (kind) {\r\n        case KEYS: return function keys() { return new Constructor(this, kind); };\r\n        case VALUES: return function values() { return new Constructor(this, kind); };\r\n      } return function entries() { return new Constructor(this, kind); };\r\n    };\r\n    var TAG = NAME + ' Iterator';\r\n    var DEF_VALUES = DEFAULT == VALUES;\r\n    var VALUES_BUG = false;\r\n    var proto = Base.prototype;\r\n    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\r\n    var $default = $native || getMethod(DEFAULT);\r\n    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\r\n    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\r\n    var methods, key, IteratorPrototype;\r\n    // Fix native\r\n    if ($anyNative) {\r\n      IteratorPrototype = _objectGpo($anyNative.call(new Base()));\r\n      if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\r\n        // Set @@toStringTag to native iterators\r\n        _setToStringTag(IteratorPrototype, TAG, true);\r\n        // fix for some old engines\r\n        if (!_library && typeof IteratorPrototype[ITERATOR] != 'function') _hide(IteratorPrototype, ITERATOR, returnThis);\r\n      }\r\n    }\r\n    // fix Array#{values, @@iterator}.name in V8 / FF\r\n    if (DEF_VALUES && $native && $native.name !== VALUES) {\r\n      VALUES_BUG = true;\r\n      $default = function values() { return $native.call(this); };\r\n    }\r\n    // Define iterator\r\n    if ((!_library || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\r\n      _hide(proto, ITERATOR, $default);\r\n    }\r\n    // Plug for library\r\n    _iterators[NAME] = $default;\r\n    _iterators[TAG] = returnThis;\r\n    if (DEFAULT) {\r\n      methods = {\r\n        values: DEF_VALUES ? $default : getMethod(VALUES),\r\n        keys: IS_SET ? $default : getMethod(KEYS),\r\n        entries: $entries\r\n      };\r\n      if (FORCED) for (key in methods) {\r\n        if (!(key in proto)) _redefine(proto, key, methods[key]);\r\n      } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);\r\n    }\r\n    return methods;\r\n  };\r\n\r\n  // 22.1.3.4 Array.prototype.entries()\r\n  // 22.1.3.13 Array.prototype.keys()\r\n  // 22.1.3.29 Array.prototype.values()\r\n  // 22.1.3.30 Array.prototype[@@iterator]()\r\n  var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {\r\n    this._t = _toIobject(iterated); // target\r\n    this._i = 0;                   // next index\r\n    this._k = kind;                // kind\r\n  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()\r\n  }, function () {\r\n    var O = this._t;\r\n    var kind = this._k;\r\n    var index = this._i++;\r\n    if (!O || index >= O.length) {\r\n      this._t = undefined;\r\n      return _iterStep(1);\r\n    }\r\n    if (kind == 'keys') return _iterStep(0, index);\r\n    if (kind == 'values') return _iterStep(0, O[index]);\r\n    return _iterStep(0, [index, O[index]]);\r\n  }, 'values');\r\n\r\n  // argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\r\n  _iterators.Arguments = _iterators.Array;\r\n\r\n  _addToUnscopables('keys');\r\n  _addToUnscopables('values');\r\n  _addToUnscopables('entries');\r\n\r\n  var ITERATOR$1 = _wks('iterator');\r\n  var TO_STRING_TAG = _wks('toStringTag');\r\n  var ArrayValues = _iterators.Array;\r\n\r\n  var DOMIterables = {\r\n    CSSRuleList: true, // TODO: Not spec compliant, should be false.\r\n    CSSStyleDeclaration: false,\r\n    CSSValueList: false,\r\n    ClientRectList: false,\r\n    DOMRectList: false,\r\n    DOMStringList: false,\r\n    DOMTokenList: true,\r\n    DataTransferItemList: false,\r\n    FileList: false,\r\n    HTMLAllCollection: false,\r\n    HTMLCollection: false,\r\n    HTMLFormElement: false,\r\n    HTMLSelectElement: false,\r\n    MediaList: true, // TODO: Not spec compliant, should be false.\r\n    MimeTypeArray: false,\r\n    NamedNodeMap: false,\r\n    NodeList: true,\r\n    PaintRequestList: false,\r\n    Plugin: false,\r\n    PluginArray: false,\r\n    SVGLengthList: false,\r\n    SVGNumberList: false,\r\n    SVGPathSegList: false,\r\n    SVGPointList: false,\r\n    SVGStringList: false,\r\n    SVGTransformList: false,\r\n    SourceBufferList: false,\r\n    StyleSheetList: true, // TODO: Not spec compliant, should be false.\r\n    TextTrackCueList: false,\r\n    TextTrackList: false,\r\n    TouchList: false\r\n  };\r\n\r\n  for (var collections = _objectKeys(DOMIterables), i = 0; i < collections.length; i++) {\r\n    var NAME = collections[i];\r\n    var explicit = DOMIterables[NAME];\r\n    var Collection = _global[NAME];\r\n    var proto = Collection && Collection.prototype;\r\n    var key;\r\n    if (proto) {\r\n      if (!proto[ITERATOR$1]) _hide(proto, ITERATOR$1, ArrayValues);\r\n      if (!proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);\r\n      _iterators[NAME] = ArrayValues;\r\n      if (explicit) for (key in es6_array_iterator) if (!proto[key]) _redefine(proto, key, es6_array_iterator[key], true);\r\n    }\r\n  }\r\n\r\n  // most Object methods by ES6 should accept primitives\r\n\r\n\r\n\r\n  var _objectSap = function (KEY, exec) {\r\n    var fn = (_core.Object || {})[KEY] || Object[KEY];\r\n    var exp = {};\r\n    exp[KEY] = exec(fn);\r\n    _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);\r\n  };\r\n\r\n  // 19.1.2.14 Object.keys(O)\r\n\r\n\r\n\r\n  _objectSap('keys', function () {\r\n    return function keys(it) {\r\n      return _objectKeys(_toObject(it));\r\n    };\r\n  });\r\n\r\n  var f$1 = Object.getOwnPropertySymbols;\r\n\r\n  var _objectGops = {\r\n  \tf: f$1\r\n  };\r\n\r\n  var f$2 = {}.propertyIsEnumerable;\r\n\r\n  var _objectPie = {\r\n  \tf: f$2\r\n  };\r\n\r\n  // 19.1.2.1 Object.assign(target, source, ...)\r\n\r\n\r\n\r\n\r\n\r\n  var $assign = Object.assign;\r\n\r\n  // should work with symbols and should have deterministic property order (V8 bug)\r\n  var _objectAssign = !$assign || _fails(function () {\r\n    var A = {};\r\n    var B = {};\r\n    // eslint-disable-next-line no-undef\r\n    var S = Symbol();\r\n    var K = 'abcdefghijklmnopqrst';\r\n    A[S] = 7;\r\n    K.split('').forEach(function (k) { B[k] = k; });\r\n    return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\r\n  }) ? function assign(target, source) { // eslint-disable-line no-unused-vars\r\n    var T = _toObject(target);\r\n    var aLen = arguments.length;\r\n    var index = 1;\r\n    var getSymbols = _objectGops.f;\r\n    var isEnum = _objectPie.f;\r\n    while (aLen > index) {\r\n      var S = _iobject(arguments[index++]);\r\n      var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);\r\n      var length = keys.length;\r\n      var j = 0;\r\n      var key;\r\n      while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\r\n    } return T;\r\n  } : $assign;\r\n\r\n  // 19.1.3.1 Object.assign(target, source)\r\n\r\n\r\n  _export(_export.S + _export.F, 'Object', { assign: _objectAssign });\r\n\r\n  var deepObjectsMerge = function deepObjectsMerge(target, source) {\r\n    // Iterate through `source` properties and if an `Object` set property to merge of `target` and `source` properties\r\n    var _arr = Object.keys(source);\r\n\r\n    for (var _i = 0; _i < _arr.length; _i++) {\r\n      var key = _arr[_i];\r\n\r\n      if (source[key] instanceof Object) {\r\n        Object.assign(source[key], deepObjectsMerge(target[key], source[key]));\r\n      }\r\n    } // Join `target` and modified `source`\r\n\r\n\r\n    Object.assign(target || {}, source);\r\n    return target;\r\n  };\r\n\r\n  // true  -> String#at\r\n  // false -> String#codePointAt\r\n  var _stringAt = function (TO_STRING) {\r\n    return function (that, pos) {\r\n      var s = String(_defined(that));\r\n      var i = _toInteger(pos);\r\n      var l = s.length;\r\n      var a, b;\r\n      if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\r\n      a = s.charCodeAt(i);\r\n      return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\r\n        ? TO_STRING ? s.charAt(i) : a\r\n        : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\r\n    };\r\n  };\r\n\r\n  var at = _stringAt(true);\r\n\r\n   // `AdvanceStringIndex` abstract operation\r\n  // https://tc39.github.io/ecma262/#sec-advancestringindex\r\n  var _advanceStringIndex = function (S, index, unicode) {\r\n    return index + (unicode ? at(S, index).length : 1);\r\n  };\r\n\r\n  // getting tag from 19.1.3.6 Object.prototype.toString()\r\n\r\n  var TAG$1 = _wks('toStringTag');\r\n  // ES3 wrong here\r\n  var ARG = _cof(function () { return arguments; }()) == 'Arguments';\r\n\r\n  // fallback for IE11 Script Access Denied error\r\n  var tryGet = function (it, key) {\r\n    try {\r\n      return it[key];\r\n    } catch (e) { /* empty */ }\r\n  };\r\n\r\n  var _classof = function (it) {\r\n    var O, T, B;\r\n    return it === undefined ? 'Undefined' : it === null ? 'Null'\r\n      // @@toStringTag case\r\n      : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T\r\n      // builtinTag case\r\n      : ARG ? _cof(O)\r\n      // ES3 arguments fallback\r\n      : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\r\n  };\r\n\r\n  var builtinExec = RegExp.prototype.exec;\r\n\r\n   // `RegExpExec` abstract operation\r\n  // https://tc39.github.io/ecma262/#sec-regexpexec\r\n  var _regexpExecAbstract = function (R, S) {\r\n    var exec = R.exec;\r\n    if (typeof exec === 'function') {\r\n      var result = exec.call(R, S);\r\n      if (typeof result !== 'object') {\r\n        throw new TypeError('RegExp exec method returned something other than an Object or null');\r\n      }\r\n      return result;\r\n    }\r\n    if (_classof(R) !== 'RegExp') {\r\n      throw new TypeError('RegExp#exec called on incompatible receiver');\r\n    }\r\n    return builtinExec.call(R, S);\r\n  };\r\n\r\n  // 21.2.5.3 get RegExp.prototype.flags\r\n\r\n  var _flags = function () {\r\n    var that = _anObject(this);\r\n    var result = '';\r\n    if (that.global) result += 'g';\r\n    if (that.ignoreCase) result += 'i';\r\n    if (that.multiline) result += 'm';\r\n    if (that.unicode) result += 'u';\r\n    if (that.sticky) result += 'y';\r\n    return result;\r\n  };\r\n\r\n  var nativeExec = RegExp.prototype.exec;\r\n  // This always refers to the native implementation, because the\r\n  // String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\r\n  // which loads this file before patching the method.\r\n  var nativeReplace = String.prototype.replace;\r\n\r\n  var patchedExec = nativeExec;\r\n\r\n  var LAST_INDEX = 'lastIndex';\r\n\r\n  var UPDATES_LAST_INDEX_WRONG = (function () {\r\n    var re1 = /a/,\r\n        re2 = /b*/g;\r\n    nativeExec.call(re1, 'a');\r\n    nativeExec.call(re2, 'a');\r\n    return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\r\n  })();\r\n\r\n  // nonparticipating capturing group, copied from es5-shim's String#split patch.\r\n  var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\r\n\r\n  var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\r\n\r\n  if (PATCH) {\r\n    patchedExec = function exec(str) {\r\n      var re = this;\r\n      var lastIndex, reCopy, match, i;\r\n\r\n      if (NPCG_INCLUDED) {\r\n        reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', _flags.call(re));\r\n      }\r\n      if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\r\n\r\n      match = nativeExec.call(re, str);\r\n\r\n      if (UPDATES_LAST_INDEX_WRONG && match) {\r\n        re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\r\n      }\r\n      if (NPCG_INCLUDED && match && match.length > 1) {\r\n        // Fix browsers whose `exec` methods don't consistently return `undefined`\r\n        // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\r\n        // eslint-disable-next-line no-loop-func\r\n        nativeReplace.call(match[0], reCopy, function () {\r\n          for (i = 1; i < arguments.length - 2; i++) {\r\n            if (arguments[i] === undefined) match[i] = undefined;\r\n          }\r\n        });\r\n      }\r\n\r\n      return match;\r\n    };\r\n  }\r\n\r\n  var _regexpExec = patchedExec;\r\n\r\n  _export({\r\n    target: 'RegExp',\r\n    proto: true,\r\n    forced: _regexpExec !== /./.exec\r\n  }, {\r\n    exec: _regexpExec\r\n  });\r\n\r\n  var SPECIES = _wks('species');\r\n\r\n  var REPLACE_SUPPORTS_NAMED_GROUPS = !_fails(function () {\r\n    // #replace needs built-in support for named groups.\r\n    // #match works fine because it just return the exec results, even if it has\r\n    // a \"grops\" property.\r\n    var re = /./;\r\n    re.exec = function () {\r\n      var result = [];\r\n      result.groups = { a: '7' };\r\n      return result;\r\n    };\r\n    return ''.replace(re, '$<a>') !== '7';\r\n  });\r\n\r\n  var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\r\n    // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\r\n    var re = /(?:)/;\r\n    var originalExec = re.exec;\r\n    re.exec = function () { return originalExec.apply(this, arguments); };\r\n    var result = 'ab'.split(re);\r\n    return result.length === 2 && result[0] === 'a' && result[1] === 'b';\r\n  })();\r\n\r\n  var _fixReWks = function (KEY, length, exec) {\r\n    var SYMBOL = _wks(KEY);\r\n\r\n    var DELEGATES_TO_SYMBOL = !_fails(function () {\r\n      // String methods call symbol-named RegEp methods\r\n      var O = {};\r\n      O[SYMBOL] = function () { return 7; };\r\n      return ''[KEY](O) != 7;\r\n    });\r\n\r\n    var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !_fails(function () {\r\n      // Symbol-named RegExp methods call .exec\r\n      var execCalled = false;\r\n      var re = /a/;\r\n      re.exec = function () { execCalled = true; return null; };\r\n      if (KEY === 'split') {\r\n        // RegExp[@@split] doesn't call the regex's exec method, but first creates\r\n        // a new one. We need to return the patched regex when creating the new one.\r\n        re.constructor = {};\r\n        re.constructor[SPECIES] = function () { return re; };\r\n      }\r\n      re[SYMBOL]('');\r\n      return !execCalled;\r\n    }) : undefined;\r\n\r\n    if (\r\n      !DELEGATES_TO_SYMBOL ||\r\n      !DELEGATES_TO_EXEC ||\r\n      (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\r\n      (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\r\n    ) {\r\n      var nativeRegExpMethod = /./[SYMBOL];\r\n      var fns = exec(\r\n        _defined,\r\n        SYMBOL,\r\n        ''[KEY],\r\n        function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\r\n          if (regexp.exec === _regexpExec) {\r\n            if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\r\n              // The native String method already delegates to @@method (this\r\n              // polyfilled function), leasing to infinite recursion.\r\n              // We avoid it by directly calling the native @@method method.\r\n              return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\r\n            }\r\n            return { done: true, value: nativeMethod.call(str, regexp, arg2) };\r\n          }\r\n          return { done: false };\r\n        }\r\n      );\r\n      var strfn = fns[0];\r\n      var rxfn = fns[1];\r\n\r\n      _redefine(String.prototype, KEY, strfn);\r\n      _hide(RegExp.prototype, SYMBOL, length == 2\r\n        // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\r\n        // 21.2.5.11 RegExp.prototype[@@split](string, limit)\r\n        ? function (string, arg) { return rxfn.call(string, this, arg); }\r\n        // 21.2.5.6 RegExp.prototype[@@match](string)\r\n        // 21.2.5.9 RegExp.prototype[@@search](string)\r\n        : function (string) { return rxfn.call(string, this); }\r\n      );\r\n    }\r\n  };\r\n\r\n  var max$1 = Math.max;\r\n  var min$2 = Math.min;\r\n  var floor$1 = Math.floor;\r\n  var SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\r\n  var SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\r\n\r\n  var maybeToString = function (it) {\r\n    return it === undefined ? it : String(it);\r\n  };\r\n\r\n  // @@replace logic\r\n  _fixReWks('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\r\n    return [\r\n      // `String.prototype.replace` method\r\n      // https://tc39.github.io/ecma262/#sec-string.prototype.replace\r\n      function replace(searchValue, replaceValue) {\r\n        var O = defined(this);\r\n        var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\r\n        return fn !== undefined\r\n          ? fn.call(searchValue, O, replaceValue)\r\n          : $replace.call(String(O), searchValue, replaceValue);\r\n      },\r\n      // `RegExp.prototype[@@replace]` method\r\n      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\r\n      function (regexp, replaceValue) {\r\n        var res = maybeCallNative($replace, regexp, this, replaceValue);\r\n        if (res.done) return res.value;\r\n\r\n        var rx = _anObject(regexp);\r\n        var S = String(this);\r\n        var functionalReplace = typeof replaceValue === 'function';\r\n        if (!functionalReplace) replaceValue = String(replaceValue);\r\n        var global = rx.global;\r\n        if (global) {\r\n          var fullUnicode = rx.unicode;\r\n          rx.lastIndex = 0;\r\n        }\r\n        var results = [];\r\n        while (true) {\r\n          var result = _regexpExecAbstract(rx, S);\r\n          if (result === null) break;\r\n          results.push(result);\r\n          if (!global) break;\r\n          var matchStr = String(result[0]);\r\n          if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);\r\n        }\r\n        var accumulatedResult = '';\r\n        var nextSourcePosition = 0;\r\n        for (var i = 0; i < results.length; i++) {\r\n          result = results[i];\r\n          var matched = String(result[0]);\r\n          var position = max$1(min$2(_toInteger(result.index), S.length), 0);\r\n          var captures = [];\r\n          // NOTE: This is equivalent to\r\n          //   captures = result.slice(1).map(maybeToString)\r\n          // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\r\n          // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\r\n          // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\r\n          for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\r\n          var namedCaptures = result.groups;\r\n          if (functionalReplace) {\r\n            var replacerArgs = [matched].concat(captures, position, S);\r\n            if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\r\n            var replacement = String(replaceValue.apply(undefined, replacerArgs));\r\n          } else {\r\n            replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\r\n          }\r\n          if (position >= nextSourcePosition) {\r\n            accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\r\n            nextSourcePosition = position + matched.length;\r\n          }\r\n        }\r\n        return accumulatedResult + S.slice(nextSourcePosition);\r\n      }\r\n    ];\r\n\r\n      // https://tc39.github.io/ecma262/#sec-getsubstitution\r\n    function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\r\n      var tailPos = position + matched.length;\r\n      var m = captures.length;\r\n      var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\r\n      if (namedCaptures !== undefined) {\r\n        namedCaptures = _toObject(namedCaptures);\r\n        symbols = SUBSTITUTION_SYMBOLS;\r\n      }\r\n      return $replace.call(replacement, symbols, function (match, ch) {\r\n        var capture;\r\n        switch (ch.charAt(0)) {\r\n          case '$': return '$';\r\n          case '&': return matched;\r\n          case '`': return str.slice(0, position);\r\n          case \"'\": return str.slice(tailPos);\r\n          case '<':\r\n            capture = namedCaptures[ch.slice(1, -1)];\r\n            break;\r\n          default: // \\d\\d?\r\n            var n = +ch;\r\n            if (n === 0) return ch;\r\n            if (n > m) {\r\n              var f = floor$1(n / 10);\r\n              if (f === 0) return ch;\r\n              if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\r\n              return ch;\r\n            }\r\n            capture = captures[n - 1];\r\n        }\r\n        return capture === undefined ? '' : capture;\r\n      });\r\n    }\r\n  });\r\n\r\n  // @@match logic\r\n  _fixReWks('match', 1, function (defined, MATCH, $match, maybeCallNative) {\r\n    return [\r\n      // `String.prototype.match` method\r\n      // https://tc39.github.io/ecma262/#sec-string.prototype.match\r\n      function match(regexp) {\r\n        var O = defined(this);\r\n        var fn = regexp == undefined ? undefined : regexp[MATCH];\r\n        return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\r\n      },\r\n      // `RegExp.prototype[@@match]` method\r\n      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\r\n      function (regexp) {\r\n        var res = maybeCallNative($match, regexp, this);\r\n        if (res.done) return res.value;\r\n        var rx = _anObject(regexp);\r\n        var S = String(this);\r\n        if (!rx.global) return _regexpExecAbstract(rx, S);\r\n        var fullUnicode = rx.unicode;\r\n        rx.lastIndex = 0;\r\n        var A = [];\r\n        var n = 0;\r\n        var result;\r\n        while ((result = _regexpExecAbstract(rx, S)) !== null) {\r\n          var matchStr = String(result[0]);\r\n          A[n] = matchStr;\r\n          if (matchStr === '') rx.lastIndex = _advanceStringIndex(S, _toLength(rx.lastIndex), fullUnicode);\r\n          n++;\r\n        }\r\n        return n === 0 ? null : A;\r\n      }\r\n    ];\r\n  });\r\n\r\n  // 7.2.8 IsRegExp(argument)\r\n\r\n\r\n  var MATCH = _wks('match');\r\n  var _isRegexp = function (it) {\r\n    var isRegExp;\r\n    return _isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : _cof(it) == 'RegExp');\r\n  };\r\n\r\n  // 7.3.20 SpeciesConstructor(O, defaultConstructor)\r\n\r\n\r\n  var SPECIES$1 = _wks('species');\r\n  var _speciesConstructor = function (O, D) {\r\n    var C = _anObject(O).constructor;\r\n    var S;\r\n    return C === undefined || (S = _anObject(C)[SPECIES$1]) == undefined ? D : _aFunction(S);\r\n  };\r\n\r\n  var $min = Math.min;\r\n  var $push = [].push;\r\n  var $SPLIT = 'split';\r\n  var LENGTH = 'length';\r\n  var LAST_INDEX$1 = 'lastIndex';\r\n\r\n  // eslint-disable-next-line no-empty\r\n  var SUPPORTS_Y = !!(function () { try { return new RegExp('x', 'y'); } catch (e) {} })();\r\n\r\n  // @@split logic\r\n  _fixReWks('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\r\n    var internalSplit;\r\n    if (\r\n      'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\r\n      'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\r\n      'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\r\n      '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\r\n      '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\r\n      ''[$SPLIT](/.?/)[LENGTH]\r\n    ) {\r\n      // based on es5-shim implementation, need to rework it\r\n      internalSplit = function (separator, limit) {\r\n        var string = String(this);\r\n        if (separator === undefined && limit === 0) return [];\r\n        // If `separator` is not a regex, use native split\r\n        if (!_isRegexp(separator)) return $split.call(string, separator, limit);\r\n        var output = [];\r\n        var flags = (separator.ignoreCase ? 'i' : '') +\r\n                    (separator.multiline ? 'm' : '') +\r\n                    (separator.unicode ? 'u' : '') +\r\n                    (separator.sticky ? 'y' : '');\r\n        var lastLastIndex = 0;\r\n        var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\r\n        // Make `global` and avoid `lastIndex` issues by working with a copy\r\n        var separatorCopy = new RegExp(separator.source, flags + 'g');\r\n        var match, lastIndex, lastLength;\r\n        while (match = _regexpExec.call(separatorCopy, string)) {\r\n          lastIndex = separatorCopy[LAST_INDEX$1];\r\n          if (lastIndex > lastLastIndex) {\r\n            output.push(string.slice(lastLastIndex, match.index));\r\n            if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\r\n            lastLength = match[0][LENGTH];\r\n            lastLastIndex = lastIndex;\r\n            if (output[LENGTH] >= splitLimit) break;\r\n          }\r\n          if (separatorCopy[LAST_INDEX$1] === match.index) separatorCopy[LAST_INDEX$1]++; // Avoid an infinite loop\r\n        }\r\n        if (lastLastIndex === string[LENGTH]) {\r\n          if (lastLength || !separatorCopy.test('')) output.push('');\r\n        } else output.push(string.slice(lastLastIndex));\r\n        return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\r\n      };\r\n    // Chakra, V8\r\n    } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\r\n      internalSplit = function (separator, limit) {\r\n        return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\r\n      };\r\n    } else {\r\n      internalSplit = $split;\r\n    }\r\n\r\n    return [\r\n      // `String.prototype.split` method\r\n      // https://tc39.github.io/ecma262/#sec-string.prototype.split\r\n      function split(separator, limit) {\r\n        var O = defined(this);\r\n        var splitter = separator == undefined ? undefined : separator[SPLIT];\r\n        return splitter !== undefined\r\n          ? splitter.call(separator, O, limit)\r\n          : internalSplit.call(String(O), separator, limit);\r\n      },\r\n      // `RegExp.prototype[@@split]` method\r\n      // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\r\n      //\r\n      // NOTE: This cannot be properly polyfilled in engines that don't support\r\n      // the 'y' flag.\r\n      function (regexp, limit) {\r\n        var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\r\n        if (res.done) return res.value;\r\n\r\n        var rx = _anObject(regexp);\r\n        var S = String(this);\r\n        var C = _speciesConstructor(rx, RegExp);\r\n\r\n        var unicodeMatching = rx.unicode;\r\n        var flags = (rx.ignoreCase ? 'i' : '') +\r\n                      (rx.multiline ? 'm' : '') +\r\n                      (rx.unicode ? 'u' : '') +\r\n                      (SUPPORTS_Y ? 'y' : 'g');\r\n\r\n        // ^(? + rx + ) is needed, in combination with some S slicing, to\r\n        // simulate the 'y' flag.\r\n        var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\r\n        var lim = limit === undefined ? 0xffffffff : limit >>> 0;\r\n        if (lim === 0) return [];\r\n        if (S.length === 0) return _regexpExecAbstract(splitter, S) === null ? [S] : [];\r\n        var p = 0;\r\n        var q = 0;\r\n        var A = [];\r\n        while (q < S.length) {\r\n          splitter.lastIndex = SUPPORTS_Y ? q : 0;\r\n          var z = _regexpExecAbstract(splitter, SUPPORTS_Y ? S : S.slice(q));\r\n          var e;\r\n          if (\r\n            z === null ||\r\n            (e = $min(_toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\r\n          ) {\r\n            q = _advanceStringIndex(S, q, unicodeMatching);\r\n          } else {\r\n            A.push(S.slice(p, q));\r\n            if (A.length === lim) return A;\r\n            for (var i = 1; i <= z.length - 1; i++) {\r\n              A.push(z[i]);\r\n              if (A.length === lim) return A;\r\n            }\r\n            q = p = e;\r\n          }\r\n        }\r\n        A.push(S.slice(p));\r\n        return A;\r\n      }\r\n    ];\r\n  });\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.6): get-css-custom-properties.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * @returns {string} css custom property name\r\n   * --------------------------------------------------------------------------\r\n   */\r\n  var getCssCustomProperties = function getCssCustomProperties() {\r\n    var cssCustomProperties = {};\r\n    var sheets = document.styleSheets;\r\n    var cssText = '';\r\n\r\n    for (var i = sheets.length - 1; i > -1; i--) {\r\n      var rules = sheets[i].cssRules;\r\n\r\n      for (var j = rules.length - 1; j > -1; j--) {\r\n        if (rules[j].selectorText === '.ie-custom-properties') {\r\n          cssText = rules[j].cssText;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (cssText) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    cssText = cssText.substring(cssText.lastIndexOf('{') + 1, cssText.lastIndexOf('}'));\r\n    cssText.split(';').forEach(function (property) {\r\n      if (property) {\r\n        var name = property.split(': ')[0];\r\n        var value = property.split(': ')[1];\r\n\r\n        if (name && value) {\r\n          cssCustomProperties[\"--\" + name.trim()] = value.trim();\r\n        }\r\n      }\r\n    });\r\n    return cssCustomProperties;\r\n  };\r\n\r\n  var minIEVersion = 10;\r\n\r\n  var isIE1x = function isIE1x() {\r\n    return Boolean(document.documentMode) && document.documentMode >= minIEVersion;\r\n  };\r\n\r\n  var isCustomProperty = function isCustomProperty(property) {\r\n    return property.match(/^--.*/i);\r\n  };\r\n\r\n  var getStyle = function getStyle(property, element) {\r\n    if (element === void 0) {\r\n      element = document.body;\r\n    }\r\n\r\n    var style;\r\n\r\n    if (isCustomProperty(property) && isIE1x()) {\r\n      var cssCustomProperties = getCssCustomProperties();\r\n      style = cssCustomProperties[property];\r\n    } else {\r\n      style = window.getComputedStyle(element, null).getPropertyValue(property).replace(/^\\s/, '');\r\n    }\r\n\r\n    return style;\r\n  };\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.6): get-color.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\r\n\r\n  var getColor = function getColor(rawProperty, element) {\r\n    if (element === void 0) {\r\n      element = document.body;\r\n    }\r\n\r\n    var property = \"--\" + rawProperty;\r\n    var style = getStyle(property, element);\r\n    return style ? style : rawProperty;\r\n  };\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.6): hex-to-rgb.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\r\n\r\n  /* eslint-disable no-magic-numbers */\r\n  var hexToRgb = function hexToRgb(color) {\r\n    if (typeof color === 'undefined') {\r\n      throw new Error('Hex color is not defined');\r\n    }\r\n\r\n    var hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i);\r\n\r\n    if (!hex) {\r\n      throw new Error(color + \" is not a valid hex color\");\r\n    }\r\n\r\n    var r;\r\n    var g;\r\n    var b;\r\n\r\n    if (color.length === 7) {\r\n      r = parseInt(color.substring(1, 3), 16);\r\n      g = parseInt(color.substring(3, 5), 16);\r\n      b = parseInt(color.substring(5, 7), 16);\r\n    } else {\r\n      r = parseInt(color.substring(1, 2), 16);\r\n      g = parseInt(color.substring(2, 3), 16);\r\n      b = parseInt(color.substring(3, 5), 16);\r\n    }\r\n\r\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \")\";\r\n  };\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI Utilities (v2.1.6): hex-to-rgba.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\r\n\r\n  /* eslint-disable no-magic-numbers */\r\n  var hexToRgba = function hexToRgba(color, opacity) {\r\n    if (opacity === void 0) {\r\n      opacity = 100;\r\n    }\r\n\r\n    if (typeof color === 'undefined') {\r\n      throw new Error('Hex color is not defined');\r\n    }\r\n\r\n    var hex = color.match(/^#(?:[0-9a-f]{3}){1,2}$/i);\r\n\r\n    if (!hex) {\r\n      throw new Error(color + \" is not a valid hex color\");\r\n    }\r\n\r\n    var r;\r\n    var g;\r\n    var b;\r\n\r\n    if (color.length === 7) {\r\n      r = parseInt(color.substring(1, 3), 16);\r\n      g = parseInt(color.substring(3, 5), 16);\r\n      b = parseInt(color.substring(5, 7), 16);\r\n    } else {\r\n      r = parseInt(color.substring(1, 2), 16);\r\n      g = parseInt(color.substring(2, 3), 16);\r\n      b = parseInt(color.substring(3, 5), 16);\r\n    }\r\n\r\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + opacity / 100 + \")\";\r\n  };\r\n\r\n  // 21.2.5.3 get RegExp.prototype.flags()\r\n  if (_descriptors && /./g.flags != 'g') _objectDp.f(RegExp.prototype, 'flags', {\r\n    configurable: true,\r\n    get: _flags\r\n  });\r\n\r\n  var TO_STRING = 'toString';\r\n  var $toString = /./[TO_STRING];\r\n\r\n  var define = function (fn) {\r\n    _redefine(RegExp.prototype, TO_STRING, fn, true);\r\n  };\r\n\r\n  // 21.2.5.14 RegExp.prototype.toString()\r\n  if (_fails(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\r\n    define(function toString() {\r\n      var R = _anObject(this);\r\n      return '/'.concat(R.source, '/',\r\n        'flags' in R ? R.flags : !_descriptors && R instanceof RegExp ? _flags.call(R) : undefined);\r\n    });\r\n  // FF44- RegExp#toString has a wrong name\r\n  } else if ($toString.name != TO_STRING) {\r\n    define(function toString() {\r\n      return $toString.call(this);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * --------------------------------------------------------------------------\r\n   * CoreUI (v2.1.6): rgb-to-hex.js\r\n   * Licensed under MIT (https://coreui.io/license)\r\n   * --------------------------------------------------------------------------\r\n   */\r\n\r\n  /* eslint-disable no-magic-numbers */\r\n  var rgbToHex = function rgbToHex(color) {\r\n    if (typeof color === 'undefined') {\r\n      throw new Error('Hex color is not defined');\r\n    }\r\n\r\n    if (color === 'transparent') {\r\n      return '#00000000';\r\n    }\r\n\r\n    var rgb = color.match(/^rgba?[\\s+]?\\([\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?,[\\s+]?(\\d+)[\\s+]?/i);\r\n\r\n    if (!rgb) {\r\n      throw new Error(color + \" is not a valid rgb color\");\r\n    }\r\n\r\n    var r = \"0\" + parseInt(rgb[1], 10).toString(16);\r\n    var g = \"0\" + parseInt(rgb[2], 10).toString(16);\r\n    var b = \"0\" + parseInt(rgb[3], 10).toString(16);\r\n    return \"#\" + r.slice(-2) + g.slice(-2) + b.slice(-2);\r\n  };\r\n\r\n  exports.asideMenuCssClasses = asideMenuCssClasses;\r\n  exports.checkBreakpoint = checkBreakpoint;\r\n  exports.sidebarCssClasses = sidebarCssClasses;\r\n  exports.validBreakpoints = validBreakpoints;\r\n  exports.deepObjectsMerge = deepObjectsMerge;\r\n  exports.getColor = getColor;\r\n  exports.getStyle = getStyle;\r\n  exports.hexToRgb = hexToRgb;\r\n  exports.hexToRgba = hexToRgba;\r\n  exports.rgbToHex = rgbToHex;\r\n\r\n  Object.defineProperty(exports, '__esModule', { value: true });\r\n\r\n}));\r\n//# sourceMappingURL=coreui-utilities.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@coreui/coreui/dist/js/coreui-utilities.js\n");

/***/ })

}]);